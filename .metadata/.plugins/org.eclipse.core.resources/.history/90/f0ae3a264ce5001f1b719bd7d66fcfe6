package com.eazybytes.accounts.service.impl;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.eazybytes.accounts.constants.AccountsConstants;
import com.eazybytes.accounts.dto.CustomerDto;
import com.eazybytes.accounts.entity.Accounts;
import com.eazybytes.accounts.entity.Customer;
import com.eazybytes.accounts.exception.CustomerAlreadyExistException;
import com.eazybytes.accounts.exception.ResourceNotFoundException;
import com.eazybytes.accounts.mapper.CustomerMapper;
import com.eazybytes.accounts.repository.AccountsRepository;
import com.eazybytes.accounts.repository.CustomerRepository;
import com.eazybytes.accounts.service.IAccountsService;

@Service
public class AccountsServiceImpl implements IAccountsService{
	
	@Autowired
	private AccountsRepository accountsRepo;
	@Autowired
    private CustomerRepository customerRepo;
	/**
	 * @param CustomerDto - CustomerDto object
	 */
	@Override
	public void createAccount(CustomerDto customerDto) {
		Optional<Customer> existCustomer=customerRepo.findByMobileNumber(customerDto.getMobileNumber());
		
		if(existCustomer.isPresent()) {
			throw new CustomerAlreadyExistException("Customer already exists with mobile number"
					+ customerDto.getMobileNumber());
			
		}
		Customer customer= CustomerMapper.mapToCustomer(customerDto, new Customer());
		customer.setCreatedAt(LocalDateTime.now());
		customer.setCreatedBy("Unknown");
		Customer savedCustomer=customerRepo.save(customer);
		Accounts account=createNewAccount(savedCustomer);
		accountsRepo.save(account);
		
		
	}
	
	private Accounts createNewAccount(Customer customer) {
		Accounts newAccount=new Accounts();
		newAccount.setCustomerId(customer.getCustomerId());
		long randomAccNbr=10000000000L+new Random().nextInt(900000000);
		newAccount.setAccountNumber(randomAccNbr);
		newAccount.setAccountType(AccountsConstants.SAVINGS);
		newAccount.setBranchAddress(AccountsConstants.ADDRESS);
		newAccount.setCreatedAt(LocalDateTime.now());
		newAccount.setCreatedBy("Unknown");
		return newAccount;
	}
	
	/**
	 * 
	 * @param mobileNumber - based on mobile number we can fetch the details
	 * @return - we can return the Accounts details
	 */
	@Override
	public CustomerDto fetchAccount(String mobileNumber) {
		Customer customer=customerRepo.findByMobileNumber(mobileNumber).orElseThrow(
				()-> new ResourceNotFoundException("Customer","Mobile Number",mobileNumber)
				);
		Accounts account=accountsRepo.findByCustomerId(customer.getCustomerId()).orElseThrow(
				()-> new ResourceNotFoundException("Account","Customer ID",customer.getCustomerId().toString())
				);
				
		return null;
	}

}
