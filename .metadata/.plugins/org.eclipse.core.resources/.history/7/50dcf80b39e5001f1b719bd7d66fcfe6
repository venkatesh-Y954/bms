package com.eazybytes.accounts.service.impl;

import java.util.Optional;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.eazybytes.accounts.constants.AccountsConstants;
import com.eazybytes.accounts.dto.CustomerDto;
import com.eazybytes.accounts.entity.Accounts;
import com.eazybytes.accounts.entity.Customer;
import com.eazybytes.accounts.exception.CustomerAlreadyExistException;
import com.eazybytes.accounts.mapper.CustomerMapper;
import com.eazybytes.accounts.repository.AccountsRepository;
import com.eazybytes.accounts.repository.CustomerRepository;
import com.eazybytes.accounts.service.IAccountsService;

@Service
public class AccountsServiceImpl implements IAccountsService{
	
	@Autowired
	private AccountsRepository accountsRepo;
	@Autowired
    private CustomerRepository customerRepo;
	/**
	 * @param CustomerDto - CustomerDto object
	 */
	@Override
	public void createAccount(CustomerDto customerDto) {
		Optional<Customer> existCustomer=customerRepo.findByMobileNumber(customerDto.getMobileNumber());
		
		if(existCustomer.isPresent()) {
			throw new CustomerAlreadyExistException("Customer with mobile number already exists");
			
		}
		Customer customer= CustomerMapper.mapToCustomer(customerDto, new Customer());
		Customer savedCustomer=customerRepo.save(customer);
		Accounts account=createNewAccount(savedCustomer);
		accountsRepo.save(account);
		
		
	}
	
	private Accounts createNewAccount(Customer customer) {
		Accounts newAccount=new Accounts();
		newAccount.setCustomerId(customer.getCustomerId());
		long randomAccNbr=10000000000L+new Random().nextInt(900000000);
		newAccount.setAccountNumber(randomAccNbr);
		newAccount.setAccountType(AccountsConstants.SAVINGS);
		newAccount.setBranchAddress(AccountsConstants.ADDRESS);
		return newAccount;
	}

}
